import { GraphQLDataSource } from "./GraphQLDataSource";
import { CheckSchemaVariables, UploadSchemaVariables, RegisterOperationsVariables, ValidateOperationsVariables, SchemaTagInfo, SchemaTagInfoVariables } from "../graphqlTypes";
export interface ClientIdentity {
    name?: string;
    version?: string;
    referenceID?: string;
}
export declare type ServiceID = string;
export declare type ClientID = string;
export declare type SchemaTag = string;
export declare type ServiceIDAndTag = [ServiceID, SchemaTag?];
export declare type ServiceSpecifier = string;
export declare type StatsWindowSize = number;
export declare type FieldStats = Map<string, Map<string, number | null>>;
export declare function noServiceError(service: string | undefined, endpoint?: string): string;
export declare class ApolloEngineClient extends GraphQLDataSource {
    private engineKey;
    private clientIdentity?;
    constructor(engineKey: string, engineEndpoint?: string, clientIdentity?: ClientIdentity | undefined);
    willSendRequest(request: any): void;
    checkSchema(variables: CheckSchemaVariables): Promise<import("../graphqlTypes").CheckSchema_service_checkSchema>;
    uploadSchema(variables: UploadSchemaVariables): Promise<import("../graphqlTypes").UploadSchema_service_uploadSchema | null>;
    validateOperations(variables: ValidateOperationsVariables): Promise<import("../graphqlTypes").ValidateOperations_service_validateOperations_validationResults[]>;
    registerOperations(variables: RegisterOperationsVariables): Promise<any>;
    loadSchemaTagsAndFieldStats(serviceID: string): Promise<{
        schemaTags: string[];
        fieldStats: Map<string, Map<string, number | null>>;
    }>;
    schemaTagInfo(variables: SchemaTagInfoVariables): Promise<import("./GraphQLDataSource").GraphQLResponse<SchemaTagInfo>>;
}
//# sourceMappingURL=index.d.ts.map