"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob_1 = __importDefault(require("glob"));
const apollo_tools_1 = require("@apollographql/apollo-tools");
class FileSet {
    constructor({ rootURI, includes, excludes, configURI }) {
        apollo_tools_1.invariant(rootURI, `Must provide "rootURI".`);
        apollo_tools_1.invariant(includes, `Must provide "includes".`);
        apollo_tools_1.invariant(excludes, `Must provide "excludes".`);
        this.rootURI = rootURI;
        this.includes = includes;
        this.excludes = excludes;
        const filterConfigAndEnvFiles = (path) => !(path.includes("apollo.config") ||
            path.includes(".env") ||
            (configURI && path === configURI.fsPath));
        if (this.allFiles().filter(filterConfigAndEnvFiles).length === 0) {
            console.warn("⚠️  It looks like there are 0 files associated with this Apollo Project. " +
                "This may be because you don't have any files yet, or your includes/excludes " +
                "fields are configured incorrectly, and Apollo can't find your files. " +
                "For help configuring Apollo projects, see this guide: https://bit.ly/2ByILPj");
        }
    }
    includesFile(filePath) {
        return this.allFiles().includes(filePath);
    }
    allFiles() {
        const joinedIncludes = `{${this.includes.join(",")}}`;
        return glob_1.default.sync(joinedIncludes, {
            cwd: this.rootURI.fsPath,
            absolute: true,
            ignore: this.excludes
        });
    }
}
exports.FileSet = FileSet;
//# sourceMappingURL=fileSet.js.map